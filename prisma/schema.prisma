// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int                   @id @default(autoincrement())
  username           String                @unique
  password           String
  role               Role                  @default(STUDENT)
  first_name         String?
  last_name          String?
  date_of_birth      DateTime?             @default(now()) @db.Date
  pictureURL         String?
  student            Student?
  teacher            Teacher?
  admin              Admin?
  createdAt          DateTime              @default(now())
  updatedAt          DateTime              @default(now()) @updatedAt
  notifications      Notification[]
  sent_notifications NotificationMessage[]
  messages           Messages[]
  remarks            Remarks[]
  assignments        Assignment[]
}

model Admin {
  userId Int  @id
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Student {
  userId      Int          @id
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  class       Class        @relation(fields: [classId], references: [id], onDelete: NoAction)
  classId     Int
  section     Section      @relation(fields: [sectionId], references: [id], onDelete: NoAction)
  sectionId   Int
  submissions Submission[]
  discussions Discussion[]
}

model Teacher {
  userId   Int       @id
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  sections Section[]
  subjects Subject[]
}

model Class {
  id       Int       @id @default(autoincrement())
  name     String
  rank     Int
  students Student[]
  sections Section[]
  subjects Subject[]
}

model Section {
  id           Int       @id @default(autoincrement())
  name         String
  class        Class     @relation(fields: [classId], references: [id], onDelete: Cascade)
  classId      Int
  students     Student[]
  subjects     Subject[]
  classTeacher Teacher   @relation(fields: [teacherId], references: [userId], onDelete: NoAction)
  teacherId    Int
}

model Subject {
  id        Int     @id @default(autoincrement())
  name      String
  class     Class   @relation(fields: [classId], references: [id], onDelete: Cascade)
  classId   Int
  section   Section @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  sectionId Int
  teacher   Teacher @relation(fields: [teacherId], references: [userId], onDelete: NoAction)
  teacherId Int
  topics    Topic[]
}

model Topic {
  id          Int          @id @default(autoincrement())
  title       String
  description String
  subject     Subject      @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  subjectId   Int
  assignments Assignment[]
  questions   Question[]
  discussions Discussion[]
}

model Assignment {
  id          Int                     @id @default(autoincrement())
  title       String
  description String?
  topic       Topic                   @relation(fields: [topicId], references: [id], onDelete: Cascade)
  topicId     Int
  user        User                    @relation(fields: [userID], references: [id], onDelete: Cascade)
  userID      Int
  files       Json[]
  deadline    DateTime
  type        AssignmentType          @default(HOMEWORK)
  questions   QuestionForAssignment[]
  enabled     Boolean                 @default(true)
  visible     Boolean                 @default(true)
  willStartAt DateTime                @default(now())
  createdAt   DateTime                @default(now())
  submissions Submission[]
  video_url   String?
}

model Submission {
  id            Int        @id @default(autoincrement())
  description   String?
  files         Json[]
  assignment    Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  assignmentId  Int
  student       Student    @relation(fields: [studentId], references: [userId], onDelete: Cascade)
  studentId     Int
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @default(now()) @updatedAt
  chosenOptions Json?
  score         Int?       @default(1)
  correct       Int?
  remarks       Remarks[]

  @@index([studentId])
}

model Remarks {
  id           Int        @id @default(autoincrement())
  remarks      String
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       Int
  submission   Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  submissionId Int
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @default(now()) @updatedAt
}

model QuestionForAssignment {
  assignment   Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  assignmentId Int
  question     Question   @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId   Int
  createdAt    DateTime   @default(now())

  @@id([assignmentId, questionId])
}

model Question {
  id          Int                     @id @default(autoincrement())
  question    String?
  image       String?
  score       Int
  topic       Topic                   @relation(fields: [topicId], references: [id], onDelete: Cascade)
  topicId     Int
  options     Option[]
  type        QuestionType            @default(MCQ)
  fill        String?
  is_AI       Boolean                 @default(false)
  assignments QuestionForAssignment[]
  createdAt   DateTime                @default(now())
  updatedAt   DateTime                @default(now()) @updatedAt
}

model Option {
  id         Int      @id @default(autoincrement())
  option     String?
  image      String?
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId Int
  correct    Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
}

model NotificationMessage {
  id            Int            @id @default(autoincrement())
  author        User           @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId      Int
  notifications Notification[]
  title         String?
  content       String?
  link          String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @default(now()) @updatedAt
}

model Notification {
  id              Int                 @id @default(autoincrement())
  user            User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          Int
  notification    NotificationMessage @relation(fields: [notification_id], references: [id], onDelete: Cascade)
  notification_id Int
  read            Boolean             @default(false)
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @default(now()) @updatedAt
}

model Discussion {
  id        Int        @id @default(autoincrement())
  student   Student    @relation(fields: [studentId], references: [userId], onDelete: Cascade)
  studentId Int
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now()) @updatedAt
  topic     Topic      @relation(fields: [topicId], references: [id], onDelete: Cascade)
  topicId   Int
  messages  Messages[]

  @@unique([studentId, topicId])
}

model Messages {
  id           Int        @id @default(autoincrement())
  discussion   Discussion @relation(fields: [discussionId], references: [id], onDelete: Cascade)
  discussionId Int
  user         User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       Int?
  is_student   Boolean    @default(false)
  is_AI        Boolean    @default(false)
  content      String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @default(now()) @updatedAt
}

enum QuestionType {
  MCQ
  FILL
}

enum AssignmentType {
  HOMEWORK
  QUIZ
  VIDEO_LESSON
}

enum Role {
  STUDENT
  TEACHER
  ADMIN
}
